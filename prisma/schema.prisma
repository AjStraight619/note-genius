datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  folders            Folder[]
  chats              Chat[]
  refinedFiles       RefinedFile[]
  PasswordResetToken PasswordResetToken[]
  files              File[]
  note               Note[]
  mathResponses      MathResponse[]

  @@index([email])
}

model Folder {
  id           String        @id @default(uuid())
  name         String
  content      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  files        File[]
  isStarred    Boolean?      @default(false)
  tags         Tag[]         @relation("FolderToTag")
  refinedFiles RefinedFile[]

  @@unique([name, userId])
  @@index([userId])
}

model RefinedFile {
  id        String   @id @default(uuid())
  original  String
  refined   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fileId    String   @unique
  file      File     @relation(fields: [fileId], references: [id])

  @@index([folderId, userId, fileId])
  @@index([userId, fileId])
}

model Tag {
  id      String   @id @default(uuid())
  name    String   @unique
  files   File[]   @relation("FileToTag")
  folders Folder[] @relation("FolderToTag")
}

model Chat {
  id            String         @id @default(uuid())
  title         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  chatMessages  ChatMessage[]
  files         File[]         @relation("ChatFiles")
  mathResponses MathResponse[]
  noteId        String?
  note          Note?          @relation("NoteToChat", fields: [noteId], references: [id])

  @@index([userId])
  @@index([noteId])
}

model File {
  id            String         @id @default(uuid())
  name          String
  content       String?        @db.LongText
  type          String?
  s3Path        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  folderId      String?
  processed     Boolean?       @default(false)
  math          Boolean        @default(false)
  folder        Folder?        @relation(fields: [folderId], references: [id])
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  chats         Chat[]         @relation("ChatFiles")
  refinedFile   RefinedFile?
  tags          Tag[]          @relation("FileToTag")
  mathResponses MathResponse[]
  noteId        String?
  note          Note?          @relation("NoteToFile", fields: [noteId], references: [id])

  @@index([userId])
  @@index([folderId])
  @@index([noteId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  role      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId])
}

model MathResponse {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  inputString String   @unique
  response    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fileId      String?
  chatId      String?
  file        File?    @relation(fields: [fileId], references: [id])
  chat        Chat?    @relation(fields: [chatId], references: [id])
  noteId      String?
  note        Note?    @relation("NoteToMathResponse", fields: [noteId], references: [id])

  @@index([userId])
  @@index([fileId])
  @@index([chatId])
  @@index([noteId])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  files         File[]         @relation("NoteToFile")
  mathResponses MathResponse[] @relation("NoteToMathResponse")
  chats         Chat[]         @relation("NoteToChat")

  @@index([userId])
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

enum FileType {
  PDF
  IMAGE_JPEG
  IMAGE_PNG
  TEXT
  HEIC
  HEIF
}
